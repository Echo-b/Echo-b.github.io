<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>EchoBai Blog</title>
  
  
  <link href="http://echobai.cn/atom.xml" rel="self"/>
  
  <link href="http://echobai.cn/"/>
  <updated>2022-01-17T12:21:08.359Z</updated>
  <id>http://echobai.cn/</id>
  
  <author>
    <name>EchoBai</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>从二选一多路选择器开始</title>
    <link href="http://echobai.cn/2022/01/17/%E4%BB%8E%E4%BA%8C%E9%80%89%E4%B8%80%E5%A4%9A%E8%B7%AF%E9%80%89%E6%8B%A9%E5%99%A8%E5%BC%80%E5%A7%8B/"/>
    <id>http://echobai.cn/2022/01/17/%E4%BB%8E%E4%BA%8C%E9%80%89%E4%B8%80%E5%A4%9A%E8%B7%AF%E9%80%89%E6%8B%A9%E5%99%A8%E5%BC%80%E5%A7%8B/</id>
    <published>2022-01-17T11:19:44.000Z</published>
    <updated>2022-01-17T12:21:08.359Z</updated>
    
    <content type="html"><![CDATA[<p>在<code>verilog</code>中，我们往往通过一个三目运算符或者一个<code>if...else</code>语句来实现二选一的电路，大家在写硬件的时候一定要摒弃软件的思考方式，我们要时刻清楚的认识到自己正在描述的是一个硬件的电路，当你对自己写的每一部分<code>verilog</code>代码都能很清晰的在脑中抽象为具体的电路硬件的时候，你的硬件水平肯定是更上一层楼的。当然这是一个长期的过程，非一日之功，贵在坚持。</p><span id="more"></span><p>下面我们用<code>spinalHDL</code>来描述下面的硬件电路。</p><p><img src="../images/gatemux21.png" alt="gatemux21"></p><p><img src="https://s2.loli.net/2022/01/17/h1O7fWx5XCoImEz.png" alt="gatemux21.png"></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cpu </span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> spinal.core._ <span class="comment">//两句import导入spinalHDL的核心库</span></span><br><span class="line"><span class="keyword">import</span> spinal.lib._</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MUX21</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123; <span class="comment">//Component类比verilog中的module</span></span><br><span class="line">  <span class="keyword">val</span> io = <span class="keyword">new</span> <span class="type">Bundle</span>&#123;  <span class="comment">//定义输入输出，可以看成是一个电路的输入输出接口</span></span><br><span class="line">    <span class="keyword">val</span> in1 = in <span class="type">Bool</span>() <span class="comment">//定义两个输入，一个选择信号</span></span><br><span class="line">    <span class="keyword">val</span> in2 = in <span class="type">Bool</span>()</span><br><span class="line">    <span class="keyword">val</span> sel = in <span class="type">Bool</span>()</span><br><span class="line">    <span class="keyword">val</span> res = out <span class="type">Bool</span>()<span class="comment">//定义输出</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  此处不能使用if...else</span></span><br><span class="line"><span class="comment">  官方定义的说明是在表示选择的时候，我们使用的是</span></span><br><span class="line"><span class="comment">  when...otherwise的搭配</span></span><br><span class="line"><span class="comment">  我前期用if...else试，结果生成的verilg代码并不是自己所想，然后去官方项目</span></span><br><span class="line"><span class="comment">  提了个issue，结果作者回复说要用 when...otherwise的搭配，顺道提醒我官方文档</span></span><br><span class="line"><span class="comment">  中有所说明，这就再次证明了读文档的重要性</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  when(io.sel)&#123;  </span><br><span class="line">    io.res := io.in1</span><br><span class="line">  &#125;otherwise&#123;</span><br><span class="line">    io.res := io.in2</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">MUX</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args:<span class="type">Array</span>[<span class="type">String</span>])&#123;</span><br><span class="line">    <span class="type">SpinalVerilog</span>(<span class="keyword">new</span> <span class="type">MUX21</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时我们的项目结构如下<br>在官方的项目结构下，我们首先建立一个<code>cpu</code>的文件夹，在下面建立一个<code>mux21.scala</code>的文件，之后我们的文件就都放在这里实现。</p><p><img src="https://s2.loli.net/2022/01/17/n5YPN2l7T6DerhU.png" alt="content.png"></p><p>书写完成后，我们用在项目文件夹下打开terminal，输入下列命令将我们的代码转化为对应的<code>verilog</code>代码。结果如下图所示</p><p><img src="../images/cpumux.png" alt="mux"></p><p>此时我们的工程文件下就会生成一个编译好的MUX21.v文件，内容如下：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> MUX21 (</span><br><span class="line">  <span class="keyword">input</span>               io_in1,</span><br><span class="line">  <span class="keyword">input</span>               io_in2,</span><br><span class="line">  <span class="keyword">input</span>               io_sel,</span><br><span class="line">  <span class="keyword">output</span> <span class="keyword">reg</span>          io_res</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">always</span> @(*) <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span>(io_sel) <span class="keyword">begin</span></span><br><span class="line">      io_res = io_in1;</span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">      io_res = io_in2;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注电路图绘制工具为<code>logisim</code>，安装方式也很简单，在<code>terminal</code>输入下列命令即可<br><code>sudo apt install logisim</code></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在&lt;code&gt;verilog&lt;/code&gt;中，我们往往通过一个三目运算符或者一个&lt;code&gt;if...else&lt;/code&gt;语句来实现二选一的电路，大家在写硬件的时候一定要摒弃软件的思考方式，我们要时刻清楚的认识到自己正在描述的是一个硬件的电路，当你对自己写的每一部分&lt;code&gt;verilog&lt;/code&gt;代码都能很清晰的在脑中抽象为具体的电路硬件的时候，你的硬件水平肯定是更上一层楼的。当然这是一个长期的过程，非一日之功，贵在坚持。&lt;/p&gt;</summary>
    
    
    
    <category term="spinalHDL" scheme="http://echobai.cn/categories/spinalHDL/"/>
    
    
    <category term="spinalHDL" scheme="http://echobai.cn/tags/spinalHDL/"/>
    
  </entry>
  
  <entry>
    <title>spinalHDL环境搭建</title>
    <link href="http://echobai.cn/2022/01/16/spinalHDL%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://echobai.cn/2022/01/16/spinalHDL%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</id>
    <published>2022-01-16T12:08:02.000Z</published>
    <updated>2022-01-16T14:38:57.215Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在开始编写<code>spinalHDL</code>之前，我们需要先安装以下三个工具。</p><ul><li>A Java JDK，<a href="https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html">下载链接</a></li><li>A Scala 2.11.X distribution,<a href="https://scala-lang.org/download/">下载链接</a><br>如果使用<code>sbt</code>进行项目构建也不用下载，但是为了熟悉<code>scala</code>语法建议安装用于练习</li><li>The SBT build tool, <a href="https://www.scala-sbt.org/download.html">下载链接</a></li></ul><span id="more"></span><p>另外我此次使用的系统是<code>ubuntu20.04LTS</code>,<code>windows</code>系统的同学其实只要把这几个工具安装成功，也是可以使用的，我早期就是在<code>windows</code>上折磨了一阵才配置好环境。</p><h3 id="Java-JDK安装"><a href="#Java-JDK安装" class="headerlink" title="Java JDK安装"></a>Java JDK安装</h3><p>在<code>ubuntu</code>中安装<code>java jdk</code>也是比较简单的，只需要输入以下命令安装即可</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="builtin-name">get</span> install openjdk-8-jdk</span><br></pre></td></tr></table></figure><h3 id="scala安装"><a href="#scala安装" class="headerlink" title="scala安装"></a>scala安装</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="builtin-name">get</span> install scala</span><br></pre></td></tr></table></figure><h3 id="sbt安装"><a href="#sbt安装" class="headerlink" title="sbt安装"></a>sbt安装</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">echo <span class="string">&quot;deb https://repo.scala-sbt.org/scalasbt/debian all main&quot;</span> | sudo tee <span class="regexp">/etc/</span>apt<span class="regexp">/sources.list.d/</span>sbt.list</span><br><span class="line">echo <span class="string">&quot;deb https://repo.scala-sbt.org/scalasbt/debian /&quot;</span> | sudo tee <span class="regexp">/etc/</span>apt<span class="regexp">/sources.list.d/</span>sbt_old.list</span><br><span class="line">curl -sL <span class="string">&quot;https://keyserver.ubuntu.com/pks/lookup?op=get&amp;search=0x2EE0EA64E40A89B84B2DF73499E82A75642AC823&quot;</span> | sudo apt-key add</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install sbt</span><br></pre></td></tr></table></figure><h3 id="下载官方样例测试环境"><a href="#下载官方样例测试环境" class="headerlink" title="下载官方样例测试环境"></a>下载官方样例测试环境</h3><p>在你自己的工作目录下执行下列命令</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/SpinalHDL/</span>SpinalTemplateSbt.git SpinalTemplateSbt</span><br><span class="line">cd SpinalTemplateSbt</span><br><span class="line">sbt run   <span class="comment"># 等待一段时间后选择 &quot;mylib.MyTopLevelVerilog&quot; 对应的序号</span></span><br></pre></td></tr></table></figure><p>如果出现下列的显示，说明我们的环境搭建没问题，之后我们就在官方样例的基础上进行开发</p><p><img src="https://s2.loli.net/2022/01/16/lfaBOFbe28uyxCz.png" alt="spinalHDLtest.png"></p><p>自此，我们的开发环境就搭建完毕，下一期我们将用<code>spinalHDL</code>实现一个简单的二选一电路。之所以选这个是因为多路选择器在我们的单周期<code>cpu</code>中是一个很具有代表性也很重要的器件，同时它也相对简单。</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;在开始编写&lt;code&gt;spinalHDL&lt;/code&gt;之前，我们需要先安装以下三个工具。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A Java JDK，&lt;a href=&quot;https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html&quot;&gt;下载链接&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A Scala 2.11.X distribution,&lt;a href=&quot;https://scala-lang.org/download/&quot;&gt;下载链接&lt;/a&gt;&lt;br&gt;如果使用&lt;code&gt;sbt&lt;/code&gt;进行项目构建也不用下载，但是为了熟悉&lt;code&gt;scala&lt;/code&gt;语法建议安装用于练习&lt;/li&gt;
&lt;li&gt;The SBT build tool, &lt;a href=&quot;https://www.scala-sbt.org/download.html&quot;&gt;下载链接&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="spinalHDL" scheme="http://echobai.cn/categories/spinalHDL/"/>
    
    
    <category term="spinalHDL" scheme="http://echobai.cn/tags/spinalHDL/"/>
    
  </entry>
  
  <entry>
    <title>spinalHDL简介</title>
    <link href="http://echobai.cn/2022/01/14/spinalHDL%E7%AE%80%E4%BB%8B/"/>
    <id>http://echobai.cn/2022/01/14/spinalHDL%E7%AE%80%E4%BB%8B/</id>
    <published>2022-01-14T09:25:54.000Z</published>
    <updated>2022-01-16T13:33:13.109Z</updated>
    
    <content type="html"><![CDATA[<h3 id="spinalHDL-简介"><a href="#spinalHDL-简介" class="headerlink" title="spinalHDL 简介"></a>spinalHDL 简介</h3><p>引用官方的简介如下：<br><code>SpinalHDL is a hardware description language written in Scala, a statically-typed functional language using the Java virtual machine (JVM). In order to start programming with SpinalHDL, you must have a JVM as well as the Scala compiler.</code></p><span id="more"></span><h3 id="spinalHDL优势"><a href="#spinalHDL优势" class="headerlink" title="spinalHDL优势"></a>spinalHDL优势</h3><p>这就要谈到<code>verilog</code>的劣势了，写过<code>verilog</code>的同学可能多多少少都会有这样的体会，那就是<code>verilog</code>在编译时，并不会提供很严格的语法检查，这也就意味着如果你粗心写错一个位宽，那么后期排错是相对比较困难的，当然要避免这种困难，就得时刻提醒自己声明或者使用变量的时候要严格的加上位宽的声明，比如声明常量1，大部分同学可能都会只写一个1，但是比较严谨的写法还是显式的声明它的位宽。<code>verilog</code>最最令人头疼的当属连线了，当你去写一个<code>cpu</code>的时候，你就会发现你大部分的时间会花在连线上，而且不一定就能够一次保证连对。因此我们此次介绍的<code>spinalHDL</code>语言不仅有很好的语法检查，而且避免了重复时间的连线，这一点在我们之后的学习中一定也能够身有体会。当然<code>verilog</code>语言本身还有其他的问题，也有许多的博客总结过，在次不做赘述。感兴趣的同学可以自行百度。</p><h3 id="spinalHDL入门途径"><a href="#spinalHDL入门途径" class="headerlink" title="spinalHDL入门途径"></a>spinalHDL入门途径</h3><p>学习<code>spinalHDL</code>你需要有一定的<code>scala</code>和计算机组成原理的基础，当然只是简单的<code>scala</code>基础就行,能够对一个单周期<code>cpu</code>的取指，译码等过程有简单的认识和理解，如果还不熟悉的同学可以去查阅相关的资料补补课，比如菜鸟之类的网站的基础知识就做的挺好的。当你有了一定的基础之后，一定要仔细的阅读官方的英文文档，虽然是英文，但是精下心来对于各位来说也不是什么大问题。至于为什么一定要阅读官方的文档呢？这是因为官方文档提供了各种工具的安装使用的过程，基本的语法介绍，这些东西在我们前期入门学习的过程中都能起到很大的帮助作用，在者就是熟悉官方文档可以为我们的排错或者查阅问题提供一个很好的帮助。避免大家因为在其他的地方查询浪费了太多的时间，而其也不一定能过保证其正确性。<br><a href="https://spinalhdl.github.io/SpinalDoc-RTD/master/SpinalHDL/Getting%20Started/getting_started.html">官方文档入口</a><br><a href="https://github.com/SpinalHDL/SpinalHDL">github项目地址</a></p><h3 id="我们的目标"><a href="#我们的目标" class="headerlink" title="我们的目标"></a>我们的目标</h3><p>在说明我们此次的目标之前，我想说明一下自己为什么想要出这么一期教程，一是兴趣使然，二是国内使用这门语言的同学应该也比较少，入门的途径或者资料是很稀缺的，因此为了使自己能够更加专心的学习<code>spinalHDL</code>，也为了能够给后来者提供一个相对比较粗浅的入门，因此决心写这么一期文章。那么言归正传，我们将会带大家从0开始，尝试用<code>spinalHDL</code>语言构建一个简单的<code>mips</code>单周期的<code>cpu</code>。希望看到这里的各位最终都能够坚持下来。</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;spinalHDL-简介&quot;&gt;&lt;a href=&quot;#spinalHDL-简介&quot; class=&quot;headerlink&quot; title=&quot;spinalHDL 简介&quot;&gt;&lt;/a&gt;spinalHDL 简介&lt;/h3&gt;&lt;p&gt;引用官方的简介如下：&lt;br&gt;&lt;code&gt;SpinalHDL is a hardware description language written in Scala, a statically-typed functional language using the Java virtual machine (JVM). In order to start programming with SpinalHDL, you must have a JVM as well as the Scala compiler.&lt;/code&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="spinalHDL" scheme="http://echobai.cn/categories/spinalHDL/"/>
    
    
    <category term="spinalHDL" scheme="http://echobai.cn/tags/spinalHDL/"/>
    
  </entry>
  
</feed>
